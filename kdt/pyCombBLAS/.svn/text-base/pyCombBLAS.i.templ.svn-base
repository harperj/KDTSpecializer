
%module pyCombBLAS

//%typemap(in) int64_t = long long;
//%typemap(out) int64_t = long long;
%apply long long {int64_t}

// This block gets copied verbatim into the header area of the generated wrapper.

%{
#define SWIG_FILE_WITH_INIT

#include "pyCombBLAS.h"
%}


// This block gets called when the module is loaded. It is wrapped in extern "C".
%init %{
init_pyCombBLAS_MPI();
%}

// It is possible to have the generated python code also include some custom code.
// This may be a good place to add an atexit() to call mpi finalize.
%pragma(python) code="import atexit"
%pragma(python) code="atexit.register(DiGraph.finalize())"


// Language independent exception handler
%include exception.i    

%exception {
	try {
		$action
	} catch(string& stringReason) {
		const char* sData = (char*)stringReason.c_str();
		SWIG_exception(SWIG_RuntimeError,sData);
		SWIG_exception(SWIG_IndexError,sData);
	} catch(...) {
		SWIG_exception(SWIG_RuntimeError,"Unknown exception");
	}
}

// Grab a Python function object as a Python object.
// Based on example from SWIG docs: http://www.swig.org/Doc1.1/HTML/Python.html#n11
#ifdef SWIG<python>
%typemap(in) PyObject *pyfunc {
  if (!PyCallable_Check($input)) {
      PyErr_SetString(PyExc_TypeError, "Need a callable object!");
      return NULL;
  }
  $1 = $input;
}

%typemap(in) PyObject* {
  $1 = $input;
}

#else
 // #warning Please define a way to handle callbacks in your target language.
#endif

// wrapped classes

INCLUDE "pySpParMat.h"

INCLUDE "pySpParMatBool.h"

INCLUDE "pySpParVec.h"

INCLUDE "pyDenseParVec.h"

INCLUDE "pyObjDenseParVec.h"

INCLUDE "pyOperations.h"

INCLUDE "pyCombBLAS.h"

